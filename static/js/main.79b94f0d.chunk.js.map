{"version":3,"sources":["logo.svg","Redux/Actions/type.js","Redux/Reducers/reducer.js","Redux/store.js","Redux/Actions/table.js","Container/FormCompoent.js","Container/TableComponent.js","App.js","reportWebVitals.js","index.js"],"names":["LoadTableSuccess","LoadTableFail","LoadFormSuccess","LoadFormFail","LoadUpdateSuccess","LoadUpadteFail","CreateDataSucess","CreateDataFail","initialstate","resultapi","formdata","error","middleware","thunk","store","createStore","state","action","type","console","log","payload","message","updatedata","finaldata","compose","applyMiddleware","clearFormdata","dispatch","Promise","resolve","reject","connect","props","useState","userId","id","title","body","loadform","setform","err","errorState","useEffect","handleChange","e","name","target","value","handleSubmit","data","getdata","handleValidation","update","JSON","parse","localStorage","getItem","filter","setItem","stringify","existingEntries","parseInt","length","push","alert","preventDefault","fields","errors","formIsValid","onSubmit","onReset","then","handleFormReset","className","onChange","event","onBlur","style","color","post","setpost","handledelete","deleteapi","handleedit","getdatabyId","fetchdataByIdapi","map","index","onClick","App","fetch","response","json","slice","catch","toString","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79b94f0d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const LoadTableSuccess = \"LoadTableSuccess\";\r\nexport const LoadTableFail = \"LoadTableFail\";\r\nexport const LoadFormSuccess = \"LoadFormSuccess\";\r\nexport const LoadFormFail = \"LoadFormFail\";\r\nexport const LoadUpdateSuccess = \"LoadUpdateSuccess\";\r\nexport const LoadUpadteFail = \"LoadUpadteFail\";\r\nexport const CreateDataSucess = \"CreateDataSucess\";\r\nexport const CreateDataFail = \"CreateDataFail\";\r\n","import { LoadTableSuccess , LoadTableFail , LoadFormSuccess , LoadFormFail , LoadUpdateSuccess, LoadUpadteFail , CreateDataSucess, CreateDataFail} from '../Actions/type';\r\nconst initialstate = {\r\n    resultapi : null,\r\n    formdata : null,\r\n    error : null\r\n}\r\nexport const reducer = (state = initialstate , action) => {\r\n    const type = action.type;\r\n    console.log(action)\r\n    switch(type){\r\n        case LoadTableSuccess : return { ...state , resultapi : action.payload , error : false} \r\n        case LoadTableFail : return  {...state , message : action.payload , error : true }\r\n        case LoadFormSuccess : return { ...state , formdata : action.payload ,  error : false} \r\n        case LoadFormFail : return {...state , message : action.payload , error : true }\r\n        case LoadUpdateSuccess : {return { ...state , updatedata : action.payload ,  error : false} }\r\n        case LoadUpadteFail : return {...state , message : action.payload , error : true }\r\n        case CreateDataSucess : {console.log(\"vcx\");return { ...state , finaldata : action.payload ,  error : false} }\r\n        case CreateDataFail : return {...state , message : action.payload , error : true }\r\n        default : return state\r\n    }\r\n}","import { createStore, applyMiddleware , compose} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport { reducer } from './Reducers/reducer';\r\nconst middleware = [thunk];\r\nconst store = createStore(reducer , compose(applyMiddleware(...middleware)));\r\n\r\nexport default store;","import { LoadTableSuccess , LoadTableFail , LoadFormSuccess , LoadFormFail , LoadUpdateSuccess, LoadUpadteFail , CreateDataSucess, CreateDataFail} from './type';\r\nconst getapi = () => (dispatch) => {\r\n    fetch('https://jsonplaceholder.typicode.com/posts').then((response) => {\r\n        return response.json();\r\n    }).then((data) => {\r\n        data = data.slice(0,5);\r\n        localStorage.setItem('productsList' , JSON.stringify(data));\r\n        dispatch({\r\n            type : LoadTableSuccess,\r\n            payload : JSON.parse(localStorage.getItem('productsList'))\r\n        });\r\n        return Promise.resolve();\r\n    }).catch((error) => {\r\n        console.log(error);\r\n        const message =\r\n          (error.response &&\r\n            error.response.data &&\r\n            error.response.data.message) ||\r\n          error.message ||\r\n          error.toString();\r\n         dispatch({\r\n            type : LoadTableFail,\r\n            payload : message\r\n        })\r\n        return Promise.reject();\r\n    })\r\n}\r\n\r\nconst deleteapi = (id) => (dispatch) => {\r\n    var existingarray = JSON.parse(localStorage.getItem('productsList'));\r\n    var update  = existingarray.filter((data) => id !== data.id);\r\n    // console.log(JSON.parse(getdatabyId))\r\n    localStorage.setItem('productsList' , JSON.stringify(update));\r\n     return dispatch({\r\n        type : LoadTableSuccess,\r\n        payload : JSON.parse(localStorage.getItem('productsList'))\r\n    });\r\n    \r\n}\r\n\r\nconst fetchdataByIdapi = (id) => (dispatch) => {\r\n    var existingarray = JSON.parse(localStorage.getItem('productsList'));\r\n    var getdatabyId  = existingarray.filter((data) => id == data.id);\r\n    // console.log(JSON.parse(getdatabyId))\r\n    return dispatch({\r\n        type : LoadFormSuccess,\r\n        payload : getdatabyId\r\n    });\r\n    // fetch('https://jsonplaceholder.typicode.com/posts/'+id).then((response) => {\r\n    //     return response.json();\r\n    // }).then((data) => {\r\n    //     console.log(data)\r\n    //     dispatch({\r\n    //         type : LoadFormSuccess,\r\n    //         payload : data\r\n    //     })\r\n    //     return Promise.resolve();\r\n    // }).catch((error) => {\r\n    //     console.log(error);\r\n    //     const message =\r\n    //       (error.response &&\r\n    //         error.response.data &&\r\n    //         error.response.data.message) ||\r\n    //       error.message ||\r\n    //       error.toString();\r\n    //      dispatch({\r\n    //         type : LoadFormFail,\r\n    //         payload : message\r\n    //     })\r\n    //     return Promise.reject();\r\n    // })\r\n}\r\n\r\nconst updateapi = (getdata) => (dispatch) => {\r\n    console.log(\"dsfsd\")\r\n    let existingarray = JSON.parse(localStorage.getItem('productsList'));\r\n    let update = existingarray.filter((data) => {\r\n        if(getdata.id == data.id){ \r\n            data.userId = getdata.userId;\r\n            data.id = getdata.id;\r\n            data.title = getdata.title;\r\n            data.body = getdata.body;\r\n            return data\r\n        }else{\r\n            return data;\r\n        }\r\n    });\r\n    localStorage.setItem('productsList' , JSON.stringify(update));\r\n        dispatch({\r\n            type : LoadTableSuccess,\r\n            payload : JSON.parse(localStorage.getItem('productsList'))\r\n        });\r\n        dispatch(clearFormdata())\r\n    return true\r\n    // return fetch('https://jsonplaceholder.typicode.com/posts/'+data.id, {\r\n    //     method: 'PUT',\r\n    //     body: JSON.stringify({\r\n    //         id: data.id,\r\n    //         title: data.title,\r\n    //         body: data.body,\r\n    //         userId: data.userId\r\n    //     }),\r\n    //     headers: {\r\n    //         'Content-type': 'application/json; charset=UTF-8',\r\n    //     },\r\n    // }).then((response) => response.json())\r\n    // .then((json) => \r\n    // {\r\n    //     dispatch({\r\n    //         type:LoadUpdateSuccess,\r\n    //         payload:json\r\n    //     })\r\n    //     return Promise.resolve();\r\n    // }).catch((error) => {\r\n    //     console.log(error);\r\n    //     const message =\r\n    //       (error.response &&\r\n    //         error.response.data &&\r\n    //         error.response.data.message) ||\r\n    //       error.message ||\r\n    //       error.toString();\r\n    //      dispatch({\r\n    //         type : LoadUpadteFail,\r\n    //         payload : message\r\n    //     })\r\n    //     return Promise.reject();\r\n    // })\r\n}\r\n\r\nconst clearFormdata = () => (dispatch) => {\r\n    console.log(\"fdgd\")\r\n        \r\n        return new Promise((resolve, reject) => {\r\n            dispatch({\r\n                type : LoadFormSuccess,\r\n                payload : null\r\n            });\r\n      \r\n            return resolve()\r\n          });\r\n    \r\n}\r\n\r\nconst createDataapi = (data) => (dispatch) => {\r\n    var existingEntries = JSON.parse(localStorage.getItem(\"productsList\"));\r\n    \r\n    if(existingEntries == null) {\r\n        existingEntries = [];\r\n        \r\n    }\r\n    data.id =  (existingEntries == []) ? 1  : parseInt(existingEntries[existingEntries.length - 1].id)+1;\r\n    existingEntries.push(data);\r\n    localStorage.setItem(\"productsList\", JSON.stringify(existingEntries));\r\n    return dispatch({\r\n        type : LoadTableSuccess,\r\n        payload : JSON.parse(localStorage.getItem('productsList'))\r\n    });\r\n    // return fetch('https://jsonplaceholder.typicode.com/posts', {\r\n    //     method: 'POST',\r\n    //     body: JSON.stringify({\r\n    //         title: data.title,\r\n    //         body: data.body,\r\n    //         userId: data.userId\r\n    //     }),\r\n    //     headers: {\r\n    //         'Content-type': 'application/json; charset=UTF-8',\r\n    //     },\r\n    // }).then((response) => response.json())\r\n    // .then((json) => \r\n    // {\r\n    //     console.log(json)\r\n    //     dispatch({\r\n    //         type:CreateDataSucess,\r\n    //         payload:json\r\n    //     })\r\n    //     return Promise.resolve();\r\n    // }).catch((error) => {\r\n    //     console.log(error);\r\n    //     const message =\r\n    //       (error.response &&\r\n    //         error.response.data &&\r\n    //         error.response.data.message) ||\r\n    //       error.message ||\r\n    //       error.toString();\r\n    //      dispatch({\r\n    //         type : CreateDataFail,\r\n    //         payload : message\r\n    //     })\r\n    //     return Promise.reject();\r\n    // })\r\n}\r\nexport { getapi , deleteapi , fetchdataByIdapi , updateapi , clearFormdata , createDataapi};","import React , {useState , useEffect} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateapi , clearFormdata , createDataapi} from '../Redux/Actions/table';\r\nconst FormComponent = (props) => {\r\n    const [loadform , setform] = useState({ userId:'' ,id:'' , title:'' , body:'' });\r\n    const [err , errorState] = useState({})\r\n    useEffect(() => {\r\n        console.log(props.formdata)\r\n        if(props.formdata){\r\n            setform({userId : props.formdata[0].userId ,  id : props.formdata[0].id ,  title : props.formdata[0].title , body : props.formdata[0].body}) ; \r\n        }\r\n        \r\n    } , [props.formdata]);\r\n    const handleChange = (e) => {\r\n        const name = e.target.name\r\n        setform({...loadform , [name] : e.target.value})\r\n    }\r\n    const handleSubmit = (e) => {\r\n        if(handleValidation()){\r\n            if(props.formdata){\r\n                props.dispatch(updateapi(loadform));\r\n            }\r\n            else{\r\n                props.dispatch(createDataapi(loadform));\r\n            }\r\n        }else{\r\n            alert(\"Form has errors.\")\r\n        }\r\n        \r\n         e.preventDefault();\r\n    }\r\n    const handleFormReset = (e) => {\r\n        props.dispatch(clearFormdata()).then(()=>{\r\n            console.log(\"fgdf\");\r\n            setform({userId:'' , id:'' ,  title:'' , body:'' }) \r\n        });\r\n        e.preventDefault();\r\n    }\r\n    const handleValidation = () => {\r\n        let fields = loadform;\r\n        let errors = {};\r\n        let formIsValid = true; \r\n             console.log(fields[\"userId\"])\r\n        if(!fields[\"userId\"]){\r\n            formIsValid = false;\r\n            errors[\"userId\"] = \"Cannot be empty\";\r\n         }\r\n         \r\n        \r\n        if(!fields[\"title\"]){\r\n           formIsValid = false;\r\n           errors[\"title\"] = \"Cannot be empty\";\r\n        }\r\n        if(!fields[\"body\"]){\r\n            formIsValid = false;\r\n            errors[\"body\"] = \"Cannot be empty\";\r\n         }\r\n  \r\n         console.log(fields[\"title\"])\r\n\r\n       errorState(errors);\r\n       return formIsValid;\r\n   }\r\n    return (\r\n        <form onSubmit={(e) => handleSubmit(e)} onReset={(e) => handleFormReset(e)}>\r\n            <label>User Id</label><input className=\"form-control\" type=\"number\" name='userId' value={loadform.userId} onChange={(event) => handleChange(event)} onBlur={()=>handleValidation} />\r\n            {err[\"userId\"] ? <span style={{color: \"red\"}}>{err[\"userId\"]}</span> : ''}\r\n            <br/>\r\n            <label>Title</label><input type=\"text\" name='title' value={loadform.title} onChange={(event) => handleChange(event)} onBlur={()=>handleValidation} />\r\n            {err[\"title\"] ? <span style={{color: \"red\"}}>{err[\"title\"]}</span> : ''}\r\n            <br/>\r\n            <label>Body</label><input type=\"text\" name='body' value={loadform.body} onChange={(event) => handleChange(event)} onBlur={()=>handleValidation} />\r\n            {err[\"body\"] ? <span style={{color: \"red\"}}>{err[\"body\"]}</span> : '' }\r\n            <br/>\r\n            <button type=\"submit\">{props.formdata ? 'Update' : 'Submit'}</button>\r\n            <button type=\"reset\">Reset</button>\r\n        </form>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n}\r\nexport default connect(mapStateToProps)(FormComponent);","import React , {useEffect, useState} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { deleteapi , fetchdataByIdapi } from '../Redux/Actions/table';\r\nconst TableComponent = (props) => {\r\n    const [post , setpost] = useState(props.resultapi);\r\n    useEffect(() => {\r\n        if(props.resultapi) setpost(props.resultapi);\r\n    }, [props.resultapi])\r\n\r\n    const handledelete = (id) => {\r\n        props.dispatch(deleteapi(id));\r\n    }\r\n    const handleedit = (id) => {\r\n        props.dispatch(fetchdataByIdapi(id));\r\n    }\r\n        if(props) {\r\n            return (\r\n                <table id=\"customers\"> \r\n                    <thead>\r\n                        <tr>\r\n                            <th>id</th>\r\n                            <th>userId</th>\r\n                            <th>title</th>\r\n                            <th>body</th>\r\n                        </tr>\r\n                    </thead>\r\n                <tbody>\r\n                    {\r\n                        (post) ? post.map((data , index) => {\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>{data.id}</td>\r\n                                    <td>{data.userId}</td>\r\n                                    <td>{data.title}</td>\r\n                                    <td>{data.body}</td>\r\n                                    <td><button onClick={() => handleedit(data.id)}>Edit</button></td>\r\n                                    <td><button onClick={() => handledelete(data.id)}>Delete</button></td>\r\n                                </tr>            \r\n                            )               \r\n                        }) : \"\"\r\n                    }\r\n                </tbody>\r\n            </table>        \r\n            )\r\n        } else { \r\n            return (\r\n                <h4>There is no data</h4>\r\n            )\r\n        }\r\n        \r\n        \r\n}   \r\n\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n}\r\nexport default connect(mapStateToProps)(TableComponent);","import { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport store from './Redux/store';\nimport { getapi } from './Redux/Actions/table';\nimport FormComponent  from './Container/FormCompoent';\nimport TableComponent  from './Container/TableComponent';\nfunction App() {\n  store.dispatch(getapi());\n  //const [passdata , setdata] = useState();\n  \n  return (\n    <Provider store={store} >\n      <FormComponent />\n      <TableComponent />\n    </Provider>    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}